// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=mocks/service_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	dto "github.com/ribeirosaimon/bootcamp/aula07/ex01/internal/domain/dto"
	entity "github.com/ribeirosaimon/bootcamp/aula07/ex01/internal/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// ConsumerPrice mocks base method.
func (m *MockService) ConsumerPrice(ids []string) (dto.ConsumerPrice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsumerPrice", ids)
	ret0, _ := ret[0].(dto.ConsumerPrice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConsumerPrice indicates an expected call of ConsumerPrice.
func (mr *MockServiceMockRecorder) ConsumerPrice(ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsumerPrice", reflect.TypeOf((*MockService)(nil).ConsumerPrice), ids)
}

// Delete mocks base method.
func (m *MockService) Delete(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockServiceMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockService)(nil).Delete), id)
}

// Get mocks base method.
func (m *MockService) Get(qtd int) ([]entity.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", qtd)
	ret0, _ := ret[0].([]entity.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockServiceMockRecorder) Get(qtd any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockService)(nil).Get), qtd)
}

// GetById mocks base method.
func (m *MockService) GetById(id int) (entity.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", id)
	ret0, _ := ret[0].(entity.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockServiceMockRecorder) GetById(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockService)(nil).GetById), id)
}

// GetByPriceGt mocks base method.
func (m *MockService) GetByPriceGt(qtd float64) []entity.Product {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByPriceGt", qtd)
	ret0, _ := ret[0].([]entity.Product)
	return ret0
}

// GetByPriceGt indicates an expected call of GetByPriceGt.
func (mr *MockServiceMockRecorder) GetByPriceGt(qtd any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByPriceGt", reflect.TypeOf((*MockService)(nil).GetByPriceGt), qtd)
}

// IsPublished mocks base method.
func (m *MockService) IsPublished(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPublished", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// IsPublished indicates an expected call of IsPublished.
func (mr *MockServiceMockRecorder) IsPublished(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPublished", reflect.TypeOf((*MockService)(nil).IsPublished), id)
}

// Save mocks base method.
func (m *MockService) Save(product *entity.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", product)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockServiceMockRecorder) Save(product any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockService)(nil).Save), product)
}

// Update mocks base method.
func (m *MockService) Update(product *entity.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", product)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockServiceMockRecorder) Update(product any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockService)(nil).Update), product)
}
